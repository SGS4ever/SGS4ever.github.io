<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>操作系统 on XR_G&#39;s Blog</title>
    <link>https://xrg.fj.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 操作系统 on XR_G&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Oct 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xrg.fj.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一些简单的进程调度算法</title>
      <link>https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;上一次挖的OAuth2.0坑还没填好，又要开一个操作系统的坑了&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;本篇介绍一些简单的进程调度算法，以及它们的代码实现。文章的具体组织为：一些关键概念的介绍 &amp;ndash;&amp;gt; 四种进程调度算法（SJF、FCFS、HRRF、HPF）。&lt;/p&gt;&#xA;&lt;p&gt;话不多说，Let&amp;rsquo;s go！&lt;/p&gt;&#xA;&lt;h3 id=&#34;一些概念&#34;&gt;一些概念&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在对四种调度算法进行介绍之前，有一些概念希望读者能够理解：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;周转时间：进程完成时间 - 进程到达时间。也就是整个进程从开始到结束所花费的时间。&lt;/li&gt;&#xA;&lt;li&gt;平均周转时间：这个数值一般用于衡量调度的效率。比如在一段时间内来了5个进程，那么在这段时间内这些进程的平均周转时间就是&lt;code&gt;五个进程的周转时间之和 / 5&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;带权周转时间：某个进程的带权周转时间就是这个进程的&lt;code&gt;周转时间 / 运行时间&lt;/code&gt;。由于系统中总有多个进程在运行，周转时间往往大于运行时间。因此，&lt;strong&gt;带权周转时间一般大于等于1&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;平均带权周转时间：多个进程带权周转时间的平均值。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;实际上，还有很多指标可以来衡量调度算法的优劣，如CPU利用率、系统吞吐量、响应时间等等。但是本文中介绍的调度算法与时间紧密相连，故此只需要理解以上几个概念，就能够看懂下文对于调度算法的分析。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;先来先服务算法first-come-first-servefcfs&#34;&gt;先来先服务算法（First Come First Serve，FCFS）&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;先来先服务算法简直是不怎么需要介绍的了。顾名思义，该算法使得CPU&lt;strong&gt;优先服务最先到达的进程&lt;/strong&gt;。生活中充满着先来先服务算法：超市排队、食堂取餐等等。下面用一个例子来模拟这个算法：&lt;/p&gt;&#xA;&lt;p&gt;假设有五个进程，它们的到达时间和希望的运行时间如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure &#xA;&#x9;&#xA;&#x9;&#x9;class=&#34;gallery-image&#34; &#xA;&#x9;&#x9;style=&#34;&#xA;&#x9;&#x9;&#x9;flex-grow: 431; &#xA;&#x9;&#x9;&#x9;flex-basis: 1035px&#34;&#xA;&#x9;&gt;&#xA;&#x9;&lt;a href=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule1.png&#34; data-size=&#34;1187x275&#34;&gt;&#xA;&#x9;&#x9;&lt;img src=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule1.png&#34;&#xA;&#x9;&#x9;&#x9;width=&#34;1187&#34;&#xA;&#x9;&#x9;&#x9;height=&#34;275&#34;&#xA;&#x9;&#x9;&#x9;srcset=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule1_hu9786970092760658879.png 480w, https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule1_hu15380386432544501786.png 1024w&#34;&#xA;&#x9;&#x9;&#x9;loading=&#34;lazy&#34;&#xA;&#x9;&#x9;&#x9;alt=&#34;进程描述&#34;&gt;&#xA;&#x9;&lt;/a&gt;&#xA;&#x9;&#xA;&#x9;&lt;figcaption&gt;进程描述&lt;/figcaption&gt;&#xA;&#x9;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;本着&lt;strong&gt;先来先服务&lt;/strong&gt;的原则，我们在第0秒的时间为进程1服务；在第4秒的时间服务结束，此时进程2、3、5都已到达，但是进程5是最先到的，因而进程5优先受到服务；在第6秒的时间进程5服务结束，此时在等候的进程还有进程2和进程3，为进程3服务，在第16秒的时间服务结束，此时还有进程2和进程4（&lt;em&gt;在第7秒的时候到的&lt;/em&gt;），为进程2服务，在第22秒的时候结束进程2，服务进程4，最终在第34秒结束进程4。&lt;/p&gt;&#xA;&lt;p&gt;CPU对这五个进程的服务次序如下图所示：&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure &#xA;&#x9;&#xA;&#x9;&#x9;class=&#34;gallery-image&#34; &#xA;&#x9;&#x9;style=&#34;&#xA;&#x9;&#x9;&#x9;flex-grow: 397; &#xA;&#x9;&#x9;&#x9;flex-basis: 954px&#34;&#xA;&#x9;&gt;&#xA;&#x9;&lt;a href=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule2.png&#34; data-size=&#34;1280x322&#34;&gt;&#xA;&#x9;&#x9;&lt;img src=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule2.png&#34;&#xA;&#x9;&#x9;&#x9;width=&#34;1280&#34;&#xA;&#x9;&#x9;&#x9;height=&#34;322&#34;&#xA;&#x9;&#x9;&#x9;srcset=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule2_hu12082699740099971003.png 480w, https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule2_hu14410866961864914089.png 1024w&#34;&#xA;&#x9;&#x9;&#x9;loading=&#34;lazy&#34;&#xA;&#x9;&#x9;&#x9;alt=&#34;服务次序&#34;&gt;&#xA;&#x9;&lt;/a&gt;&#xA;&#x9;&#xA;&#x9;&lt;figcaption&gt;服务次序&lt;/figcaption&gt;&#xA;&#x9;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果你还记得第一小节所讲的内容，我们不妨算一下在这个例子中这几个概念分别是多少：&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure &#xA;&#x9;&#xA;&#x9;&#x9;class=&#34;gallery-image&#34; &#xA;&#x9;&#x9;style=&#34;&#xA;&#x9;&#x9;&#x9;flex-grow: 433; &#xA;&#x9;&#x9;&#x9;flex-basis: 1039px&#34;&#xA;&#x9;&gt;&#xA;&#x9;&lt;a href=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule3.png&#34; data-size=&#34;1178x272&#34;&gt;&#xA;&#x9;&#x9;&lt;img src=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule3.png&#34;&#xA;&#x9;&#x9;&#x9;width=&#34;1178&#34;&#xA;&#x9;&#x9;&#x9;height=&#34;272&#34;&#xA;&#x9;&#x9;&#x9;srcset=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule3_hu7160578525819059917.png 480w, https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule3_hu7053231678864673500.png 1024w&#34;&#xA;&#x9;&#x9;&#x9;loading=&#34;lazy&#34;&#xA;&#x9;&#x9;&#x9;alt=&#34;统计时间&#34;&gt;&#xA;&#x9;&lt;/a&gt;&#xA;&#x9;&#xA;&#x9;&lt;figcaption&gt;统计时间&lt;/figcaption&gt;&#xA;&#x9;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;你看出其中存在的问题了吗？&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;短作业优先算法shortest-job-firstsjf&#34;&gt;短作业优先算法（Shortest Job First，SJF）&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;先来先服务算法很好理解、在生活中很常见，但是它存在一个问题：对于一些运行时间很短的进程，光是在那边排队等待所花费的时间可能数倍于真正的运行时间！&lt;/p&gt;&#xA;&lt;p&gt;在上一个例子中，&lt;strong&gt;进程2&lt;/strong&gt;所花费的运行时间只有6秒，但是它很不幸地被进程3抢占先机，只能眼睁睁看着进程3运行了10秒。光是等待的时间就比运行的时间还多！因此，它的&lt;strong&gt;带权周转时间&lt;/strong&gt;也是最大的，现在是否对这个概念的理解深刻了许多？&lt;/p&gt;&#xA;&lt;p&gt;先来先服务的死板特性对于某些短作业来说简直是灾难，此时，&lt;strong&gt;短作业优先算法&lt;/strong&gt;就显得友好许多。&lt;/p&gt;&#xA;&lt;p&gt;短作业优先算法不关注进程的到达时间，当CPU结束了一个进程的服务之后，永远从等待的所有进程中找出运行时间最短的进程为其服务。&lt;/p&gt;&#xA;&lt;p&gt;还是上面的例子，在第0秒的时间为进程1服务，在第4秒的时间进程2、3、5都已到达，此时进程5需要的时间最少，因此它优先受到服务；在第6秒的时间进程5的服务结束了，此时在等候的进程还有2和3，&lt;strong&gt;虽然进程3是先到的，但是进程2所需要的时间更少，因此进程2优先受到服务&lt;/strong&gt;；在第12秒的时候进程2的服务结束了，此时在等候的进程还有3和4，优先为进程3服务，在第22秒的时候为进程4服务，在第34秒的时候结束。&lt;/p&gt;&#xA;&lt;p&gt;这个例子中，我们的进程2比进程3更晚到达，但是由于它所需要的时间更短，就得到了优先的服务。这就是短作业优先的思想。&lt;/p&gt;&#xA;&lt;p&gt;如果你没有第一时间看出这个算法的问题，那么请考虑下面这个例子：&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure &#xA;&#x9;&#xA;&#x9;&#x9;class=&#34;gallery-image&#34; &#xA;&#x9;&#x9;style=&#34;&#xA;&#x9;&#x9;&#x9;flex-grow: 229; &#xA;&#x9;&#x9;&#x9;flex-basis: 551px&#34;&#xA;&#x9;&gt;&#xA;&#x9;&lt;a href=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule4.png&#34; data-size=&#34;637x277&#34;&gt;&#xA;&#x9;&#x9;&lt;img src=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule4.png&#34;&#xA;&#x9;&#x9;&#x9;width=&#34;637&#34;&#xA;&#x9;&#x9;&#x9;height=&#34;277&#34;&#xA;&#x9;&#x9;&#x9;srcset=&#34;https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule4_hu3875199304541011945.png 480w, https://xrg.fj.cn/p/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/schedule4_hu14205472652092219134.png 1024w&#34;&#xA;&#x9;&#x9;&#x9;loading=&#34;lazy&#34;&#xA;&#x9;&#x9;&#x9;alt=&#34;新例子&#34;&gt;&#xA;&#x9;&lt;/a&gt;&#xA;&#x9;&#xA;&#x9;&lt;figcaption&gt;新例子&lt;/figcaption&gt;&#xA;&#x9;&#xA;&lt;/figure&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
